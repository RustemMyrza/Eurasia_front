import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import i18n from "i18next";
import { initReactI18next } from "react-i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import checkRedirectedTicket from "./CheckRedirect"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
import RedirectMessage from "./RedirectMessage";

i18n
  .use(LanguageDetector) // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
  .use(initReactI18next) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º react-i18next
  .init({
    fallbackLng: "ru",
    interpolation: {
      escapeValue: false,
    },
    detection: {
      order: ["localStorage", "cookie", "navigator"], // –û—Ç–∫—É–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫
      caches: ["localStorage", "cookie"], // –ì–¥–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
    },
  });

const SSE_URL = "http://localhost:3001/api/get-ticket-status";

export default function RealTimeStatus({ branchId, ticketData }) {
    const [status, setStatus] = useState(null);
    const [loading, setLoading] = useState(true);
    const [showRedirectMessage, setShowRedirectMessage] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const [redirectData, setRedirectData] = useState(null); // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const navigate = useNavigate();

    useEffect(() => {
        setLoading(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

        const url = `${SSE_URL}?branchId=${branchId}&eventId=${ticketData.eventId}`;
        const eventSource = new EventSource(url);

        eventSource.onmessage = async (event) => {
            if (!event.data) return;

            try {
                const data = JSON.parse(event.data);
                if (!data || !data.action) return;

                if (data.action === 'COMPLETED') {
                    try {
                        await new Promise(resolve => setTimeout(resolve, 3000));
                        const redirectedTicket = await checkRedirectedTicket(ticketData.eventId, branchId);
                        if (redirectedTicket) {
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            setRedirectData({
                                eventId: redirectedTicket.EventId,
                                ticketNo: redirectedTicket.TicketNo,
                                startTime: redirectedTicket.StartTime,
                                serviceName: redirectedTicket.ServiceName,
                            });
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç RedirectMessage
                            setShowRedirectMessage(true);
                        } else {
                            localStorage.removeItem('iin');
                            localStorage.removeItem('phone');
                            localStorage.removeItem('ticketReceived');
                            localStorage.removeItem('ticketTimestamp');
                            navigate(`/branch/${branchId}`);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω–∞:', error);
                    }
                }

                setStatus(data.action);
                setLoading(false);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE:", error);
            }
        };

        eventSource.onerror = (err) => {
            console.error("–û—à–∏–±–∫–∞ SSE:", err);
            setLoading(false);
        };

        return () => {
            eventSource.close();
        };
    }, [branchId, ticketData, navigate]);

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å RedirectMessage
    if (showRedirectMessage) {
        return (
            <RedirectMessage
                onRedirect={() => {
                        setShowRedirectMessage(false);
                        setRedirectData(null);
                        navigate(`/branch/${branchId}/ticket/${redirectData.eventId}`, {
                            state: redirectData,
                        })
                    }
                }
            />
        );
    }

    // –ü–æ–∫–∞ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (loading) {
        return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!status) {
        return <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>;
    }

    // –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    return (
        <div>
            {status === "WAIT" && <h4>{i18n.language === "ru" ? '‚åõ –û–∂–∏–¥–∞–Ω–∏–µ' : '‚åõ –ö“Ø—Ç—ñ“£—ñ–∑'}</h4>}
            {status === "CALLING" && <h4>–í–∞—Å –≤—ã–∑—ã–≤–∞—é—Ç</h4>}
            {status === "MISSED" && <h4>‚ùå –í—ã –Ω–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Å–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–∫–Ω–æ</h4>}
            {status === "RESCHEDULLED" && <h4>üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è</h4>}
            {status === "INSERVICE" && <h4>–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è...</h4>}
            {status === "NEW" && <h4>üÜï –ù–æ–≤—ã–π</h4>}
            {status === "INQUEUE" && <h4>üïí –í –æ—á–µ—Ä–µ–¥–∏</h4>}
            {status === "COMPLETED" && <h4>‚úÖ –û–±—Å–ª—É–∂–µ–Ω–æ</h4>}
            {status === "DELAYED" && <h4>–û—Ç–ª–æ–∂–µ–Ω–æ</h4>}
        </div>
    );
}