import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import checkRedirectedTicket from "./CheckRedirect"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

const SSE_URL = "http://localhost:3001/api/get-ticket-status";

export default function RealTimeStatus({ branchId, ticketData }) {
    const [status, setStatus] = useState(null);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    console.log('ticketData:', ticketData);
    useEffect(() => {
        setLoading(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
        const url = `${SSE_URL}?branchId=${branchId}&eventId=${ticketData.eventId}`;
        const eventSource = new EventSource(url);
    
        eventSource.onmessage = async (event) => {  // –ò—Å–ø–æ–ª—å–∑—É–µ–º async, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await
            if (!event.data) return;
    
            try {
                const data = JSON.parse(event.data);
                if (!data || !data.action) return;
    
                if (data.action === 'COMPLETED') {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                        const redirectedTicket = await checkRedirectedTicket(ticketData); // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                        if (redirectedTicket) {
                            navigate(`/branch/${branchId}/ticket/${redirectedTicket['$']['EventId']}`, {
                                eventId: redirectedTicket['$']['EventId'],
                                ticketNo: redirectedTicket['$']['TicketNo'],
                                startTime: redirectedTicket['$']['StartTime'],
                                serviceName: redirectedTicket['$']['ServiceName']
                            })
                        } else {
                            localStorage.removeItem('iin');
                            localStorage.removeItem('phone');
                            localStorage.removeItem('ticketReceived');
                            localStorage.removeItem('ticketTimestamp');
                            navigate(`/branch/${branchId}`);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω–∞:', error);
                    }
                }
    
                setStatus(data.action);
                setLoading(false);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE:", error);
            }
        };
    
        eventSource.onerror = (err) => {
            console.error("–û—à–∏–±–∫–∞ SSE:", err);
            setLoading(false);
        };
    
        return () => {
            eventSource.close();
        };
    }, [branchId, ticketData, navigate]);
    

    // –ü–æ–∫–∞ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (loading) {
        return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!status) {
        return <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>;
    }

    // –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    return (
        <div>
            {status === "WAIT" && <h4>‚åõ –û–∂–∏–¥–∞–Ω–∏–µ</h4>}
            {status === "CALLING" && <h4>–í–∞—Å –≤—ã–∑—ã–≤–∞—é—Ç</h4>}
            {status === "MISSED" && <h4>‚ùå –í—ã –Ω–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Å–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–∫–Ω–æ</h4>}
            {status === "RESCHEDULLED" && <h4>üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è</h4>}
            {status === "INSERVICE" && <h4>–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è...</h4>}
            {status === "NEW" && <h4>üÜï –ù–æ–≤—ã–π</h4>}
            {status === "INQUEUE" && <h4>üïí –í –æ—á–µ—Ä–µ–¥–∏</h4>}
            {status === "COMPLETED" && <h4>‚úÖ –û–±—Å–ª—É–∂–µ–Ω–æ</h4>}
        </div>
    );
}
